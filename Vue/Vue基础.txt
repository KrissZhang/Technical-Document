1.Vue是什么？

一套用于构建用户界面的渐进式框架。

2.安装Vue：

引入Vue.js依赖即可。

3.Vue实例：

(1)创建一个实例：

var vm = new Vue({
	//选项
})

(2)数据与方法：

①数据：

//数据对象
var data = {a:1}

//将数据对象加入到一个Vue实例中
var vm = new Vue({
	data:data
})

当数据改变时，视图会进行重渲染。只有当实例创建时data中存在的属性才是响应式的。

唯一的例外是使用：

var obj = {
	foo: 'bar'
}

Object.freeze(obj)

阻止修改现有的属性，响应系统无法追踪变化。

②方法：Vue暴露了一些有用的实例属性与方法，它们都有前缀 $ 。

如：

vm.$data = data

vm.$el = document.getElementById('example')

//$watch是一个实例方法
vm.$watch('a', function(newValue, oldValue){
	//这个回调将在 'vm.a' 改变后调用
}) 

(3)生命周期：

每个Vue实例在被创建时都要经过一系列的初始化过程，即生命周期。

如：created 钩子可以用来在一个实例被创建后执行代码。

new Vue({
	data:{
		a:1
	},
	created:function(){
		console.log('a is:' + this.a)
	}
})

另有一些其他的钩子在生命周期的不同阶段被调用，如：mounted、updated、destroyed。

注：不要在选项属性或回调上使用箭头函数。

4.模板语法：

Vue.js使用了基于HTML的模板语法，允许开发者声明式地将DOM绑定至底层Vue实例的数据。

(1)插值：

文本：最常见的就是双大括号文本插值。

<span>Message:{{msg}}</span>


原始HTML：将内容解析为HTML而非文本内容。(动态渲染HTML容易导致XSS攻击，不要对用户输入值使用)

<p><span v-html="rawHtml"></span></p>


特性：使用v-bind指令来绑定属性。

如：

    <div id="app2">
        <input type="button" v-bind:disabled="disabled" name="btn" value="btn" onclick="alert('123')" />
    </div>
	
	var app2 = new Vue({
		el: '#app2',
		data:{
			disabled:false
		}
	});
	
	
使用Js表达式：在模板中不仅可以绑定简单的属性键值，还可以对Js单表达式进行支持。

如：

{{ number + 1 }}

{{ ok ? 'YES' : 'NO' }}

{{ message.split('').reverse().join('') }}

<div v-bind:id="'list-' + id"></div>

只适用于单表达式。


指令：带有v-前缀的特殊特性。

如：

<p v-if="seen">看到了</p>

当表达式的值改变时，将其产生的连带影响，响应式地作用于DOM。


参数：

一些指令能够接收一个'参数'，在指令名称之后以冒号表示。

如：

<a v-bind:href="url"></a>

在这里 href 是参数，告知 v-bind 指令将该元素的 href 特性与表达式 url 的值绑定。


动态参数：2.6.0新增。

可以用方括号括起来的Js表达式作为一个指令的参数：

如：<a v-bind:[attributeName]="url"></a>

如果在Vue实例中有一个 data 属性 attributeName ，值为 href，那么上面的表达式等价于 <a v-bind:href="url"></a>。

同理：<a v-on:[eventName]="doSomething"></a> 等价于 <a v-on:focus="doSomething"></a>。

动态参数预期会求出一个字符串，异常情况下为null，这个特殊的 null 值可以显式地用于移除绑定。

在DOM中使用模板时，应当回避大写键名。


修饰符：

以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊的方式绑定。

如：

.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()

<form v-on:submit.prevent="onSubmit"></form>


缩写：

v-bind缩写：

<a v-bind:href="url"></a> 即 <a :href="url"></a>

v-on缩写：

<a v-on:click="doSomething"></a> 即 <a @click="doSomething"></a>

5.计算属性和侦听器：

(1)计算属性：

对于任何复杂逻辑，都应该使用计算属性。

如：

    <div id="app4">
        {{reversedMessage}}
    </div>
	
	var app4 = new Vue({
		el:'#app4',
		data:{
			message:'msg'
		},
		computed:{
			reversedMessage:function () {
				return this.message.split('').reverse().join('')
			}
		}
	});
	
使用方法也可以达到同样的效果，但是计算属性是带缓存的，而使用方法是不带此功能的：

    <div id="app5">
        {{reversedMessage()}}
    </div>
	
	var app5 = new Vue({
		el:'#app5',
		data:{
			message:'msg'
		},
		methods:{
			reversedMessage:function () {
				return this.message.split('').reverse().join('')
			}
		}
	});
	
(2)侦听属性：一种更通用的方式来观察和响应Vue实例上的数据变动。

如：

var vm = new Vue({
  el: '#demo',
  data: {
    firstName: 'Foo',
    lastName: 'Bar'
  },
  computed: {
    fullName: function () {
      return this.firstName + ' ' + this.lastName
    }
  }
})

(3)计算属性默认只有getter，但是也可以手动添加setter：

computed: {
  fullName: {
    // getter
    get: function () {
      return this.firstName + ' ' + this.lastName
    },
    // setter
    set: function (newValue) {
      var names = newValue.split(' ')
      this.firstName = names[0]
      this.lastName = names[names.length - 1]
    }
  }
}

(4)侦听器：watch。

如：

    <div id="app6">
        {{result}}
    </div>
	
	var app6 = new Vue({
		el:'#app6',
		data:{
			change:'',
			result:''
		},
		watch:{
			change:function (newchange, oldchange) {
				this.result = newchange;
			}
		}
	});
	
6.Class 与 Style绑定：

(1)绑定HTML Class：

对象语法：

如：

<div class="static" v-bind:class="{ active: isActive, 'text-danger': hasError }"></div>

data: {
  isActive: true,
  hasError: false
}

渲染结果为：<div class="static active"></div>

或者这种写法：

<div v-bind:class="classObject"></div>

data: {
  classObject: {
    active: true,
    'text-danger': false
  }
}


数组语法：

<div v-bind:class="[activeClass, errorClass]"></div>

data: {
  activeClass: 'active',
  errorClass: 'text-danger'
}

渲染为：<div class="active text-danger"></div>

还有如下写法：

<div v-bind:class="[isActive ? activeClass : '', errorClass]"></div>

<div v-bind:class="[{ active: isActive }, errorClass]"></div>


用在组件上：

当在一个自定义组件上使用 class 属性时，这些类将被添加到该组件的根元素上面。这个元素上已经存在的类不会被覆盖。


(2)绑定内联样式：

对象语法：

<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>

data: {
  activeColor: 'red',
  fontSize: 30
}

或者：

<div v-bind:style="styleObject"></div>

data: {
  styleObject: {
    color: 'red',
    fontSize: '13px'
  }
}


数组语法：

<div v-bind:style="[baseStyles, overridingStyles]"></div>


自动添加前缀：

略。


多重值：2.3.0+

从 2.3.0 起你可以为 style 绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值。

如：

<div :style="{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"></div>

这样写只会渲染数组中最后一个被浏览器支持的值。

7.条件渲染：

(1)v-if：用于条件性地渲染一块内容，这块内容只会在表达式返回 true 值的时候被渲染。

如：

<h1 v-if="someone">123</h1>

(2)v-else：

<h1 v-if="someone">123</h1>
<h1 v-else>321</h1>

(3)在 <template> 元素上使用 v-if

因为 v-if 是一个指令，必须添加到元素上，有时候需要切换多个元素，可以使用 <template> 元素来包裹。

如：

<template v-if="ok">
  <h1>Title</h1>
  <p>Paragraph 1</p>
  <p>Paragraph 2</p>
</template>

(4)可以使用 v-else 来表示 v-if 的 else 块：

<div v-if="Math.random() > 0.5">
  Now you see me
</div>
<div v-else>
  Now you don't
</div>

v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。

(5)v-else-if：2.1.0新增。

如：

<div v-if="type === 'A'">
  A
</div>
<div v-else-if="type === 'B'">
  B
</div>
<div v-else-if="type === 'C'">
  C
</div>
<div v-else>
  Not A/B/C
</div>

类似于 v-else，v-else-if 也必须紧跟在带 v-if 或者 v-else-if 的元素之后。

(6)用 key 管理可复用的元素：

Vue会尽可能地复用元素，但有时候我们想让元素从头渲染，这时可以设置 key值 来处理。

如：

<template v-if="loginType === 'username'">
  <label>Username</label>
  <input placeholder="Enter your username" key="username-input">
</template>
<template v-else>
  <label>Email</label>
  <input placeholder="Enter your email address" key="email-input">
</template>

(7)v-show：另一个用于根据条件展示元素的指令。

如：

<h1 v-show="ok">Hello!</h1>

v-if 和 v-show 的差别：

v-if 是懒加载的，只有在初始条件为真的时候才会渲染，而 v-show 不管初始条件是什么，总会渲染，只是进行简单地CSS切换。所以，切换频繁时用 v-show，切换条件较少改变时用 v-if。

(8)不推荐 v-for 和 v-if 一起使用。

8.列表渲染：

(1)v-for：

可以用 v-for 指令基于一个数组来渲染一个列表。v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名。

如：

    <ul id="app7">
        <li v-for="item in items">
            {{item.msg}}
        </li>
    </ul>
	
	var app7 = new Vue({
		el:'#app7',
		data:{
			items:[
				{msg:'1'},
				{msg:'2'},
				{msg:'3'}
			]
		}
	});
	
v-for 还支持可选的第二个参数，即当前索引：

<ul id="example-2">
  <li v-for="(item, index) in items">
    {{ parentMessage }} - {{ index }} - {{ item.message }}
  </li>
</ul>

也可以用 of 代替 in 作为分隔符。

(2)在 v-for 里使用对象：

如：

<ul id="v-for-object" class="demo">
  <li v-for="value in object">
    {{ value }}
  </li>
</ul>

new Vue({
  el: '#v-for-object',
  data: {
    object: {
      title: 'How to do lists in Vue',
      author: 'Jane Doe',
      publishedAt: '2016-04-10'
    }
  }
})

也可以提供第二个参数为键名：

<div v-for="(value, name) in object">
  {{ name }}: {{ value }}
</div>

还可以用第三个参数作为索引：

<div v-for="(value, name, index) in object">
  {{ index }}. {{ name }}: {{ value }}
</div>

(3)维护状态：

尽可能在使用 v-for 时提供 key attribute作为标识。

如：

<div v-for="item in items" v-bind:key="item.id">
  <!-- 内容 -->
</div>

(4)数组更新检测：

Vue将侦听数组的某些方法，以触发视图更新。包括：

push()
pop()
shift()
unshift()
splice()
sort()
reverse()


替换数组：

执行某些方法时不会重新渲染整个列表，而是最大范围地重用。包括：

filter()、concat() 和 slice()。


特别注意：

Vue不能检测这两种数组的变动：

①利用索引直接设置一个数组项：

vm.items[indexOfItem] = newValue

可以这样替换解决：

Vue.set(vm.items, indexOfItem, newValue) 或 vm.items.splice(indexOfItem, 1, newValue) 或 vm.$set(vm.items, indexOfItem, newValue)

②修改数组的长度：

vm.items.length = newLength

可以这样替换解决：

vm.items.splice(newLength)

③Vue不能检测对象属性的添加或删除：

使用 Vue.set(vm.userProfile, 'age', 27) 或者 vm.$set(vm.userProfile, 'age', 27) 添加或删除属性到嵌套的对象上。

操作多个新属性时，可以利用：Object.assign()、_.extend()。

如：

vm.userProfile = Object.assign({}, vm.userProfile, {
  age: 27,
  favoriteColor: 'Vue Green'
})


(5)显示过滤/排序后的结果：

有时，我们想要显示一个数组经过过滤或排序后的版本，而不实际改变或重置原始数据。在这种情况下，可以创建一个计算属性，来返回过滤或排序后的数组。

如：

<li v-for="n in evenNumbers">{{ n }}</li>

data: {
  numbers: [ 1, 2, 3, 4, 5 ]
},
computed: {
  evenNumbers: function () {
    return this.numbers.filter(function (number) {
      return number % 2 === 0
    })
  }
}

也可以使用方法：

<li v-for="n in even(numbers)">{{ n }}</li>

data: {
  numbers: [ 1, 2, 3, 4, 5 ]
},
methods: {
  even: function (numbers) {
    return numbers.filter(function (number) {
      return number % 2 === 0
    })
  }
}

(6) v-for 也可以接受整数：

<div>
  <span v-for="n in 10">{{ n }} </span>
</div>

(7)在 <template> 上使用 v-for：类似 v-if 的作用。

<ul>
  <template v-for="item in items">
    <li>{{ item.msg }}</li>
    <li class="divider" role="presentation"></li>
  </template>
</ul>

(8) v-for 与 v-if 一同使用：

因为 v-for 比 v-if 有更高的优先级，所以一起使用时应该以这样的形式：

<li v-for="todo in todos" v-if="!todo.isComplete">
  {{ todo }}
</li>

如果你的目的是有条件地跳过循环的执行，那么可以将 v-if 置于外层元素上：

如：

<ul v-if="todos.length">
  <li v-for="todo in todos">
    {{ todo }}
  </li>
</ul>
<p v-else>No todos left!</p>

(9)在组件上使用 v-for ：

暂略。

9.事件处理：

(1)监听事件：

可以用 v-on 指令监听DOM事件，并在触发时运行Js代码。

如：

    <div id="app8">
        <input type="button" name="btn3" value="btn3" @click="number += 1" />
        <span>number is {{number}}</span>
    </div>
	
	var app8 = new Vue({
		el:'#app8',
		data:{
			number:0
		}
	});
	
(2)事件处理方法：

使用 v-on 接收一个方法名称：

    <div id="app9">
        <input type="button" name="btn4" value="btn4" @click="addone" />
        <span>number is {{number}}</span>
    </div>
	
	var app9 = new Vue({
		el:'#app9',
		data:{
			number:0
		},
		methods:{
			addone:function (event) {
				this.number += 1;
			}
		}
	});
	
(3)直接在内联Js中调用方法：

如：

    <div id="app10">
        <input type="button" name="btn5" value="btn5" @click="show('123',$event)" />
    </div>
	
	var app10 = new Vue({
		el:'#app10',
		methods:{
			show:function (msg,event) {
				if(event){
					event.preventDefault();
				}
				alert(msg);
			}
		}
	});
	
(4)事件修饰符：

修饰符是由点开头的指令后缀来表示的。

如：

<!-- 阻止单击事件继续传播 -->
<a v-on:click.stop="doThis"></a>

<!-- 提交事件不再重载页面 -->
<form v-on:submit.prevent="onSubmit"></form>

<!-- 修饰符可以串联 -->
<a v-on:click.stop.prevent="doThat"></a>

<!-- 只有修饰符 -->
<form v-on:submit.prevent></form>

<!-- 添加事件监听器时使用事件捕获模式 -->
<!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 -->
<div v-on:click.capture="doThis">...</div>

<!-- 只当在 event.target 是当前元素自身时触发处理函数 -->
<!-- 即事件不是从内部元素触发的 -->
<div v-on:click.self="doThat">...</div>

使用修饰符时要保证顺序，不然执行语义会不一致。

2.1.4新增：

<!-- 点击事件将只会触发一次 -->
<a v-on:click.once="doThis"></a>

2.3.0新增：

Vue 还对应 addEventListener 中的 passive 选项提供了 .passive 修饰符。

如：

<!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 -->
<!-- 而不会等待 `onScroll` 完成  -->
<!-- 这其中包含 `event.preventDefault()` 的情况 -->
<div v-on:scroll.passive="onScroll">...</div>

这个 .passive 修饰符尤其能够提升移动端的性能。

不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。

(5)按键修饰符：监听键盘事件。

如：

    <div id="app11">
        <input v-on:keyup.enter="warn" >
    </div>
	
	var app11 = new Vue({
		el:'#app11',
		methods:{
			warn:function () {
				alert('333');
			}
		}
	});
	
可以直接将 KeyboardEvent.key 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。

如：

<input v-on:keyup.page-down="onPageDown">

(6)按键码：

keyCode的用法已经被废弃了。

(7)系统修饰符：

用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。

.ctrl
.alt
.shift
.meta

如：

<!-- Alt + C -->
<input @keyup.alt.67="clear">

<!-- Ctrl + Click -->
<div @click.ctrl="doSomething">Do something</div>

(8).exact 修饰符：

2.5.0新增：

.exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。

<!-- 即使 Alt 或 Shift 被一同按下时也会触发 -->
<button @click.ctrl="onClick">A</button>

<!-- 有且只有 Ctrl 被按下的时候才触发 -->
<button @click.ctrl.exact="onCtrlClick">A</button>

<!-- 没有任何系统修饰符被按下的时候才触发 -->
<button @click.exact="onClick">A</button>

(9)鼠标按钮修饰符：

.left
.right
.middle

这些修饰符会限制处理函数仅响应特定的鼠标按钮。

10.表单输入绑定：

(1)基础用法：

可以用 v-model 指令在表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue实例的数据作为数据来源。

v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：

①text 和 textarea 元素使用 value 属性和 input 事件。
②checkbox 和 radio 使用 checked 属性和 change 事件。
③select 字段将 value 作为 prop 并将 change 作为事件。

如：

    <div id="app12">
        <input type="text" name="text" v-model="textValue" />
        <br />
        <textarea v-model="textareaValue"></textarea>
        <br />
        <input type="checkbox" id="cb1" v-model="checkboxValue" />
        <br />
        <input type="radio" name="radio" value="1" v-model="radioValue" />
        <input type="radio" name="radio" value="2" v-model="radioValue" />
        <br />
        <select v-model="selectValue" [multiple--多选]>
			<option disabled value="">请选择</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
        </select>
    </div>
	
	var app12 = new Vue({
		el:'#app12',
		data:{
			textValue:'0',
			textareaValue:'0',
			checkboxValue:true,
			radioValue:true,
			selectValue:'1'
		}
	});
	
多个复选框的用法和单选框类似。
	
用 v-for 动态渲染 select 选项：

<select v-model="selected">
  <option v-for="option in options" v-bind:value="option.value">
    {{ option.text }}
  </option>
</select>
<span>Selected: {{ selected }}</span>

new Vue({
  el: '...',
  data: {
    selected: 'A',
    options: [
      { text: 'One', value: 'A' },
      { text: 'Two', value: 'B' },
      { text: 'Three', value: 'C' }
    ]
  }
})

值绑定：对于单选按钮，复选框及选择框的选项，v-model 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)。

<!-- 当选中时，`picked` 为字符串 "a" -->
<input type="radio" v-model="picked" value="a">

<!-- `toggle` 为 true 或 false -->
<input type="checkbox" v-model="toggle">

<!-- 当选中第一个选项时，`selected` 为字符串 "abc" -->
<select v-model="selected">
  <option value="abc">ABC</option>
</select>

(2)修饰符：

.lazy：在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了输入法组合文字时)。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步。

<input v-model.lazy="msg" >

.number：如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符。

<input v-model.number="age" type="number">

.trim：如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符。

<input v-model.trim="msg">

(3)在组件上使用 v-model：

暂略。

11.组件基础：

(1)基本示例：

    <div id="app13">
        <button-counter></button-counter>
    </div>
	
	Vue.component('button-counter',{
		data:function () {
			return{
				count:0
			}
		},
		template: '<button v-on:click="count++">You Click Me {{count}} times</button>'
	});

	new Vue({
		el:'#app13'
	});

因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项。

(2)组件的复用：

可以将组件进行任意次数的复用：

如：

<div id="components-demo">
  <button-counter></button-counter>
  <button-counter></button-counter>
  <button-counter></button-counter>
</div>

每个组件都会各自独立维护它的 count。因为你每用一次组件，就会有一个它的新实例被创建。

(3)data 必须是一个函数：

一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝。

如：

data: function () {
  return {
    count: 0
  }
}

(4)组件的组织：

在模板中使用组件之前必须先注册以便 Vue 能够识别。注册方式分为：全局注册和局部注册。

全局注册：

Vue.component('my-component-name', {
  // ... options ...
})

全局注册的组件可以用在其被注册之后的任意(new Vue)新创建的Vue实例。

(5)通过Prop向子组件传递数据：

Prop 是你可以在组件上注册的一些自定义特性。当一个值传递给一个 prop 特性的时候，它就变成了那个组件实例的一个属性。

如：

Vue.component('blog-post', {
  props: ['title'],
  template: '<h3>{{ title }}</h3>'
})

<blog-post title="My journey with Vue"></blog-post>
<blog-post title="Blogging with Vue"></blog-post>
<blog-post title="Why Vue is so fun"></blog-post>

或者使用数组的方式：

<blog-post
  v-for="post in posts"
  v-bind:key="post.id"
  v-bind:title="post.title"
></blog-post>

new Vue({
  el: '#blog-post-demo',
  data: {
    posts: [
      { id: 1, title: 'My journey with Vue' },
      { id: 2, title: 'Blogging with Vue' },
      { id: 3, title: 'Why Vue is so fun' }
    ]
  }
})

(6)单个根元素：每个组件必须只有一个根元素。

(7)监听子组件事件：

父级组件可以像处理 native DOM 事件一样通过 v-on 监听子组件实例的任意事件：

<blog-post v-on:enlarge-text="postFontSize += 0.1"></blog-post>

同时子组件可以通过调用内建的 $emit 方法 并传入事件名称来触发一个事件：

<button v-on:click="$emit('enlarge-text')">
  Enlarge text
</button>

(8)使用事件抛出一个值：

如：

<button v-on:click="$emit('enlarge-text', 0.1)">
  Enlarge text
</button>

<blog-post v-on:enlarge-text="postFontSize += $event">

</blog-post>

(9)组件上使用 v-model：

v-model 是语法糖：

<input v-model="searchText"> 等价于 <input v-bind:value="searchText" v-on:input="searchText = $event.target.value">

v-model 用在组件上则是：

<custom-input v-bind:value="searchText" v-on:input="searchText = $event">

</custom-input>

组件内的 input 必须：

①将其 value 特性绑定到一个名叫 value 的 prop 上。
②在其 input 事件被触发时，将新的值通过自定义的 input 事件抛出。

如：

Vue.component('custom-input', {
  props: ['value'],
  template: '<input v-bind:value="value" v-on:input="$emit('input', $event.target.value)">'
})

<custom-input v-model="searchText"></custom-input>

(10)通过插槽分发内容：<slot> 元素。

Vue.component('alert-box', {
  template: '
    <div class="demo-alert-box">
      <strong>Error!</strong>
      <slot></slot>
    </div>
  '
})

(11)动态组件：

有的时候，在不同组件之间进行动态切换是非常有用的。

如：

<!-- 组件会在 `currentTabComponent` 改变时改变 -->
<component v-bind:is="currentTabComponent"></component>

currentTabComponent可以是：

①已注册组件的名字。
②一个组件的选项对象。

(12)解析DOM模板的注意事项：

略。












































































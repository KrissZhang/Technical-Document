1.Shell是什么？

Shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动/挂起/停止，甚至是编写一些程序。

Shell还是一个功能相当强大的编程语言。Shell是解释执行的脚本语言，在Shell中可以直接调用Linux系统命令。

相当于内核程序和用户之间的翻译器。

Bash是当前Linux中的标准Shell。

Bash命令进入Shell，exit退出打开的Shell。

2.脚本执行方法：

(1)echo输出命令：

echo [选项] 输出内容
选项：
-e 支持反斜线控制的字符转换

在屏幕上打印一段内容，如果有空格则添加""。
使用\命令时要加-e选项。如：echo -e "ni\nhao"

使用-e，还可以按照十六进制ASCII码也同样可以输出
如：echo -e "\x68"  输出h

感叹号在""输出中是有特殊意义的，不要直接用。

Linux命令行不支持中文，图形界面支持，远程工具支持。

颜色输出：echo -e "\e[1;31m XXXXXXXXXXX \e[0m"
#30m黑色 31m红色 32m绿色

(2)第一个脚本(Hello World)：Shell脚本可以调用系统命令。
# 代表注释，后面的内容不生效，但是：#!/bin/bash 这句命令标称后面写的命令是Linux的标准脚本。在脚本开头一定要写上。

编写完成脚本之后，有两种执行方式：
一  通过Bash直接执行，如：bash hello.sh
二  先赋予权限再通过相对或绝对路径执行，如：chmod 755 hello.sh   ./hello.sh   /root/hello.sh   这种较常用


3.Bash的基本功能：

(1)命令别名与快捷键：

查看与设定别名：
alias 查看系统中所有的命令别名。
alias 别名 = '原命令' 设定命令别名

别名永久生效：
vi ~/.bashrc
写入环境变量配置文件，对每个用户单独生效

删除别名：
unalias 别名

命令生效顺序：
第一顺位：用绝对路径或相对路径执行的命令。
第二顺位：执行别名。
第三顺位：执行Bash的内部命令。
第四顺位：执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令

常用快捷键：
ctrl + c  强制终止当前命令
ctrl + l  清屏
ctrl + a  光标移动到命令行首
ctrl + e  光标移动到命令行尾
ctrl + u  从光标所在的位置删除到行首
ctrl + z  把命令放入后台
ctrl + r  在历史命令中搜索

(2)历史命令：

history [选项] [历史命令保存文件]
选项：
	-c 清空历史命令
	-w 把缓存中的历史命令写入历史命令保存文件~/.bash_history
	
本次操作未退出保存的不会出现在文件中，可以强制立刻写入。

历史命令的调用：

使用上、下箭头调用以前的历史命令
使用"!n"重复执行第n条历史命令
使用"!!"重复执行上一条命令
使用"!字串"重复执行最后一条以该字符串开头的命令

命令和文件补全：

命令补全：tab键

(3)输出重定向：

标准输入输出：

设备    设备文件名    文件描述符    类型
键盘    /dev/stdin        0       标准输入
显示器  /dev/sdtout       1       标准输出
显示器  /dev/sdterr       2       标准错误输出

输出重定向：改变了输出方向。

类型                    符号                    作用
标准输出重定向          命令 > 文件             以覆盖的方式，把命令的正确输出输入到指定的文件或设备当中
						命令 >> 文件            以追加的方式，把命令的正确输出输出到指定的文件或设备当中
						
标准错误输出重定向      错误命令 2> 文件        以覆盖的方式，把命令的错误输出输入到指定的文件或设备当中
(基本不可用)			错误命令 2>> 文件       以追加的方式，把命令的错误输出输出到指定的文件或设备当中

正确输出和错误输出同时保存          命令 > 文件 2>&1          以覆盖的方式，把正确输出和错误输出都保存到同一个文件当中
									命令 >> 文件 2>&1         以追加的方式，把正确输出和错误输出都保存到同一个文件当中
									命令 &> 文件              以覆盖的方式，把正确输出和错误输出都保存到同一个文件当中
									命令 &>> 文件             以追加的方式，把正确输出和错误输出都保存到同一个文件当中
									命令 >> 文件1 2>> 文件2   把正确的输出追加到文件1，把错误的输出追加到文件2
									
									
/dev/null 黑洞，相当于垃圾站

输入重定向：很少用

命令 < 文件 把文件作为命令的输入

wc [选项] [文件名]
选项：
-c 统计字节数
-w 统计单词数
-l 统计行数

(4)管道符：

多命令顺序执行：

多命令执行符    格式    作用
     ;       命令1;命令2      多个命令顺序执行，命令之间没有任何逻辑联系
	 &&      命令1 && 命令2   逻辑与，当命令1正确执行，则命令2才会执行，当命令1执行不正确，则命令2不会执行
	 ||      命令1 || 命令2   逻辑或，当命令1执行不正确，则命令2才会执行，当命令1正确执行，则命令2不会执行
	 
可以混合使用，如：判断命令是否执行正确：ls && echo yes || echo no

管道符：

命令格式：命令1 | 命令2
命令1的正确输出作为命令2的操作对象，命令1正确执行，命令2才会执行。可以重复使用。
如：ls -l /etc | more

(5)通配符：

通配符    作用
?         匹配任意一个字符 
*		  匹配0个或任意多个任意字符，也就是可以匹配任意内容
[]		  匹配中括号中的任意一个字符，例如：[abc]代表一定匹配一个字符，可能是a、b、c中之一。
[-]		  匹配中括号中的任意一个字符，- 代表一个范围，如：[a-z]代表匹配一个小写字母。
[^]		  逻辑非，表示匹配不是中括号内的一个字符，例如：[^0-9]代表匹配一个不是数字的字符。

主要用来匹配文件或者目录。匹配内容使用正则表达式。

Bash中其他特殊符号：

符号    作用
 ''     单引号。在单引号中的所有特殊符号都没有特殊含义。如：'$'
 ""     双引号。在双引号中的所有特殊符号都没有特殊含义。但是："$"、"`"、"\"例外，拥有"调用变量的值"、"引用命令"、"转义符"的特殊含义。
 ··     反引号(数字1旁边的键)。反引号括起来的内容是系统命令，在Bash中会先执行它。和$()作用一样，不过推荐使用$()。
 $()    和反引号的作用一样，用来引用系统命令。
 #      在Shell脚本中，#开头的行代表注释。
 $      用于调用变量的值，如：$name，代表调用变量名为name的值。a=1,$a
 \      转义符，跟在\之后的特殊符号将失去特殊含义，变为普通字符，如：\$ 代表输出 $ 而不是变量引用。
 


	 





































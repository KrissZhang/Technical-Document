1.Shell简介：

Shell主要用于简化管理操作而非实现功能。

2.Bash变量：

变量：略。

命名规则：和Java类似，变量的默认类型都是字符串。

数据分类：字符串型、整型、浮点型、日期型。

变量的分类：

用户自定义变量：
环境变量：主要保存的是和系统操作环境相关的数据。变量可以自定义，但是对系统生效的环境变量名和变量作用是固定的。
位置参数变量：主要是用来向脚本中传递参数或数据的，变量名不能自定义，变量作用是固定的。
预定义变量：是Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定的。

(1)用户自定义变量：

变量名=变量值    (等号左右不能加空格，如果变量值中包含空格则必须使用引号包裹起来)

变量调用：如其中一种方法：echo $name

变量叠加：
x=123
x="$x"456
x=${x}789

变量查询：set
查询系统下所有生效的变量。

set -u    当变量不存在时，明确报错。

变量删除：unset 变量名

(2)环境变量：(很少自定义)

与自定义变量的区别：
环境变量是全局变量，用户自定义变量是局部变量。用户自定义变量只在当前的Shell中生效，环境变量在当前Shell和这个Shell的所有子Shell中生效。(如用bash命令进入子Shell,exit从子Shell中退出到父Shell)
对系统生效的环境变量名和变量作用是固定的。

设置环境变量：
export 变量名=变量值
或
变量名=变量值
export 变量名

查看环境变量：
set    查询系统下所有生效的变量。

env    查看环境变量。

调用，如：echo $a

删除环境变量：unset 变量名

常用环境变量：

HOSTNAME：主机名
SHELL：当前的shell
TERM：终端环境
HISTSIZE：历史命令条数
SSH_CLIENT：当前操作环境是用ssh连接的，这里记录客户端ip
SSH_TTY：ssh连接的终端时pts/1
USER：当前登录的用户

环境变量最好用大写。

PATH环境变量：
PATH变量：系统查找命令的路径。

echo $PATH
#查看PATH环境变量

PATH="$PATH":/root/sh
#增加PATH变量的值

PS1环境变量：只能用set查看。
PS1变量：命令提示符设置。PS1='[\u@\h \W]\$ '
如：
[root@localhost test]#
[user1@localhost test]$
    
(3)语系变量：

locale：查询当前系统语系。
- LANG(当前生效)：定义系统主语系的变量
- LC_ALL：定义整体语系的变量

echo $LANG：查看系统当前语系
locale -a | more：查看Linux支持的所有语系

查询系统默认语系：
cat /etc/sysconfig/i18n

Linux中文支持：

前提条件：正确安装中文字体和中文语系。
图形界面正确显示中文。
第三方工具正确显示中文。
纯字符界面，则必须安装第三方插件。

(4)位置参数变量：

位置参数变量        作用
$n                  n为数字，$0代表命令本身，$1-$9代表第一到第九个参数，十以上的参数需要用大括号包含，如：${10}
$*                  这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体
$@                  这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待
$#                  这个变量代表命令行中所有参数的个数

$n：可以向脚本中传递参数值。
如：
test1.sh：
#!/bin/bash

v1=$1
v2=$2
sum1=$(($v1+$v2))
echo $sum1

执行：
./test1.sh 10 20

(5)预定义变量：

预定义变量        作用
$?                最后一次执行的命令的返回状态。如果这个变量的值为0，则上一个命令正确执行，否则执行不正确。(常用)
$$                当前进程的进程号(PID)。
$!                后台运行的最后一个进程的进程号(PID)

(6)接收键盘输入：

read [选项] [变量名]
-  选项：
   -p  "提示信息"：在等待read输入时，输出提示信息。
   -t  秒数：read命令会一直等待用户输入，使用此选项可以指定等待时间
   -n  字符数：read命令只接受指定的字符数，就会执行
   -s  隐藏输入的数据，适用于机密信息的输入
   
如：
test2.sh：
#!/bin/bash

read -p "please input param1 : " -t 20 param1
echo $param1

read -p "please input param2 : " -t 20 param2
echo $param2

p1=$param1
p2=$param2
echo $(($p1+$p2))

给权限，然后进入目录执行。






































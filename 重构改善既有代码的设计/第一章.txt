1.重构：

在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构。

注意：如果你发现自己需要为一个程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构那个程序，使特性的添加比较容易进行，然后再添加特性。

2.重构之前，首先检查自己是否有一套可靠的测试机制，这些测试必须有自我检验能力。

3.重构过程1：


将很长的函数切开，并把较小块的代码移至更合适的类：


(1)找出代码的逻辑泥团并运用提取方法。（每次做了修改后都需要进行测试以验证修改的正确性）

--1.在这段代码中找出函数内的局部变量和参数，不会被修改的变量就可以被当成参数传入新的函数。
对于会被修改的变量，如果只有一个变量会被修改，那么就可以把它当做返回值。

注意：重构技术就是以微小的步伐修改程序。如果你犯下了错误，很容易便可以发现它。

(2)将代码块提取之后，便可以将方法内部的变量名修改为容易理解的名字。

(3)如果一个函数没有使用它所在类的信息，那么这个方法可能就被放错了位置。一般来说函数应该放在它使用的数据的对象之内。

--1.修改代码，使方法适应新的类环境(去掉参数，修改函数名)。
--2.找出程序中对于旧函数的所有引用点，并修改它们，使他们适应新函数。
--3.去掉旧函数。

(4)运用临时替换查询，将不必要的返回值给去掉。


运用多态取代


(1)最好不要在另一个对象的属性基础上运用switch语句，如果不得不使用也应该在对象自己的数据上使用。（传递参数时应该尽量考虑系统容易发生变化的部分，将变化造成的影响控制在内部）

(2)将方法移动后，如果原来的程序内部仍需使用，那么可以使用对象调用的方式调用新的方法。

(3)使用继承来抽取多个相似类的共通部分。












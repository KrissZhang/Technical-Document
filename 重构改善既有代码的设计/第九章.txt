简化条件表达式：

1.分解条件表达式：

场景：存在一个非常复杂的if...else...语句。

目的：使非常复杂的条件表达式变得简洁易懂。

解决方案：
(1)将条件括号中的表达式提取为一个独立的函数。
(2)将条件执行体中的实现逻辑提取为一个独立的函数。

2.合并条件表达式：

场景：检查条件各不相同，但是最终的行为却是相同的。

解决方案：将这些判断条件合并为一个条件表达式并且提炼为一个独立的函数。

3.合并重复的条件片段：

场景：在条件表达式的每一个分支上都有着相同的一段代码。

解决方案：将重复的代码搬移到条件表达式之外。

4.移除控制标记：

场景：在某个条件语句中，某个变量有着控制标记的作用，用来控制分支的执行情况。

目的：将条件分支的逻辑简化，更加清晰易懂。

解决方案：合理使用break、continue、return简化分支。

5.以卫语句取代嵌套条件表达式：

场景：函数中的条件逻辑使人难以看清正常的执行路径。

目的：将程序的分支逻辑变得更加简洁清晰。

解决方案：使用卫语句表现所有特殊的情况。

卫语句：某个条件非常罕见，当这个条件为真时就应该立刻从函数中返回。这种单独检查的语句就称为卫语句。

如：
if(result==null){
	return;
}

6.以多态取代条件表达式：

场景：一个条件表达式根据对象的类型不同而选择不同的程序逻辑。

解决方案：将这个条件表达式的每一个分支放入一个子类的重写方法中，将原始的方法声明为抽象方法。

7.引入空对象：感觉添加继承或实现的方式过于复杂，不适用。

场景：处理经常需要对某个实例进行判空的情况。

8.引入断言：感觉这种应用方式不太好，断言在开发结束后一般会被删除。

某一段代码需要对程序状态做出假设，以断言明确这种假设。


























重新组织函数：

1.Extract Method(提炼函数)：这里可以直接使用eclipse的Extract Method功能更加方便地抽取方法。

有一段代码可以被组织在一起并独立出来，将这段代码放进一个独立函数中，并让函数名称解释该函数的用途。

(1)创建一个新的函数，根据这个函数的目的来命名。
(2)将提炼出的代码从源函数复制到新建的目标函数中。
(3)查看提炼出的代码中是否包含了作用域仅限于源函数的变量。
(4)检查是否有"仅用于被提炼代码段"的临时变量。如果有，在目标函数中将它们声明为临时变量。
(5)检查是否有任何局部变量的值被它改变。
(6)将被提炼代码段中需要读取的局部变量当做参数传给目标函数。
(7)在源函数中将被提炼代码段替换成对目标函数的调用。

2.内联函数：一个函数的本体和名称一样清楚易懂。

在函数调用点插入函数本体，然后移除该函数。(相当于抽取函数的反向处理)

(1)检查函数，确认它不具有多态性。
(2)找出这个函数的所有被调用点。
(3)将这个函数的所有被调用点都替换为函数本体。
(4)删除该函数的定义。

3.内联临时变量：一个临时变量只被简单赋值过一次，并且这个临时变量妨碍了其他重构。

将所有对该变量的引用动作替换成对它赋值的表达式自身。

(1)检查临时变量的赋值语句，确保等号右边的赋值语句表达式没有副作用。
(2)用将该变量声明为final的方式来确保该变量仅仅只被赋值了一次。
(3)找到该临时变量的所有引用点，将它们替换成为临时变量赋值的表达式。
(4)删除原来的表达式和临时变量。

4.以查询取代临时变量：

一个临时变量保存了一个表达式的运算结果，将此表达式提炼到一个函数中，再将这个临时变量对表达式的引用替换成对函数的调用。

5.引入解释性变量：将一个比较复杂的表达式的结果放进一个临时变量之中。(相当于内联临时变量的逆过程)

6.分解临时变量：

某个临时变量既不是循环变量也不被用于收集计算结果，但这个临时变量被赋值超过了一次。

针对每次赋值，定义一个独立、对应的临时变量。

7.移除对参数的赋值：以一个临时变量取代该参数的位置。

8.以函数对象取代函数：

出现场景：在一个大型的函数中，局部变量的使用导致你无法抽取函数。

解决方案：将此函数放入一个独立的对象中，那么这些临时变量就可以被定义为字段，再拆分成一个一个的小型函数。

9.替换算法：就是直接将算法逻辑进行更改，这里需要注意的是在更改逻辑前需要将算法逻辑拆分得足够小，足以方便地修改。















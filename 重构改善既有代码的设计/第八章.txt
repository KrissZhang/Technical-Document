重新组织数据：


1.自封装字段：(其实就是Java中的getter和setter)

场景：直接访问一个字段，但字段之间的关系会逐渐变得笨拙。

解决方案：为字段设置设值和取值的函数来访问字段，而不是直接访问。

2.以对象取代数据值：

由于数据项会随着系统的扩展而变得复杂，所以最好使用对象来装载数据。

3.将值对象改为引用对象：

略。

4.将引用对象改为值对象：

上述操作的逆过程。

5.以对象取代数组：便于使阅读代码的人清楚每个数据的意义。

用对象来替换数组，对于数组中的每一个元素用字段来代替。

6.复制"被监视数据"：

场景：后台系统需要使用到GUI组件中的数据，这些数据就是被监视数据。

解决方案：将数据复制到后端，在后端建立观察者模式，同步更新这些数据。保证系统良好的分层，将界面和系统逻辑分开。

7.将单向关联改为双向关联：

场景：两个类都需要使用到对方的特性，但其间只有一条单向连接。

解决方案：添加反向指针，并使修改函数能够同时更新两条连接。(持有引用)

8.将双向关联改为单向关联：

上述场景的逆过程，去除不必要的关联。

9.以字面常量取代魔法数字：

场景：存在含有特别意义的字面数值。

解决方案：创建一个以涵义命名的常亮来代替这个字面值。

10.封装字段：

场景：类中存在public的字段。

解决方案：将字段设为private，并提供访问方法。

11.封装集合：

目的：避免用户直接操作集合，隐藏数据信息。

解决方案：让函数返回该集合的一个只读副本，并在这个类中提供添加/移除集合元素的函数。

12.以数据类代替记录：这个比较老了，一般不会遇到。

13.以类取代类型码：？

类型码是什么？

14.以子类取代类型码：？

15.以State/strategy取代类型码：？

16.以字段取代子类：

如果你的各个子类之间的唯一区别在于"返回常量数据",那么就返回超类中新增的字段，然后删掉子类。





























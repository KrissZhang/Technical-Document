代码的坏味道（不好的地方）：


1.重复代码：

出现场景：

(1)同一个类的两个函数含有相同的表达式。(提取方法)
(2)两个互为兄弟的子类内含相同的表达式。(先将两个类提取方法，再对被提炼出来的方法上移放入超类中)
(3)两个不相关的类出现了重复代码。(对其中一个类使用抽取类，在另一个类中使用它)


2.过长函数：

(1)分解函数：每当感觉需要用注释来说明一些代码的时候就将这些代码封装到一个独立函数中并以用途来命名。

注意：

使用抽取方法时，可以使用临时替换查询来消除过多的参数和临时变量。
引入参数对象和保持对象完整可以使整个参数列表变得更加简洁。(用方法对象替换方法是最后的手段)

(2)书写注释的方法、条件表达式、循环常常都是提炼代码的标志位置。

3.过大的类：

出现场景：

(1)太多的实例变量：将实例变量提炼至新的类中。
(2)太多的代码：拆分代码。

4.过长参数列：

(1)用方法替换参数。
(2)保持整个对象。
(3)引入参数对象。

5.发散式变化：要求软件可以更容易地被修改。一个类受多种变化的影响。

解决方案：针对某一外界变化的所有相应修改都只应该发生在单一类中，而这个新类内的所有内容都应该反映该变化，将这些变化抽取到一个类中。

6.散弹式修改：一种变化引发多个类的相应修改。

解决方案：使用移动方法和移动属性将所有需要修改的代码放进同一个类，如果没有合适的就创建一个。通常可以使用内联类来将一系列相关的行为封装起来。

7.依恋情结：函数对其他类的依赖高过了自己所处的本类。

解决方案：
(1)将函数移至依赖的类中。
(2)如果函数中仅有一部分存在这种依赖关系，那么就提取方法到独立的函数中，再调整函数的位置。

8.数据泥团：不同类中的相同字段、函数签名中的相同参数应当使用提取类将它们提炼到一个独立的对象中，再对象化参数。

9.基本类型偏执：使用小对象将数据值替换成对象。

10.慎用switch语句：

(1)switch语句会造成重复的问题，应该多考虑用多态来代替。

11.平行继承体系：每当你为某个类增加一个子类，必须也为另一个类相应增加一个子类。

解决方案:让一个继承体系的实例引用另一个继承体系的实例。

12.冗赘类：不必要的类。

解决方案：去除不必要的类结构。

13.夸夸其谈未来性：预想到的功能是用户根本不会使用到的功能。

解决方案：去掉即可。

14.令人迷惑的临时字段：对象内某个实例变量仅为某种特定情况而设，当后面来猜测其用途时变得非常困难。

解决方案：将其抽取成一个类。

15.过度耦合的消息链：

出现场景：一个对象请求另一个对象，然后该对象继续请求另一个对象，在消息请求上形成了一条长长的链。一旦对象之间的关系发生了改变，那么就必须要修改代码。

解决方案：隐藏委托关系。

16.中间人：过度的使用委托。

解决方案：删除中间人，直接和负责的对象打交道。

17.狎昵关系：类之间的关系过度紧密。

解决方案：将双向关联改为单向关联。

18.异曲同工的类：两个函数做同一件事情，但是却有不同的签名。

19.不完美的库类：库往往构建得不够好。

20.纯稚的数据类：

数据类：是指拥有一些字段，以及用于访问这些字段的函数，其他没有任何内容的类。

数据类的注意点：封装数据字段，对于不应该被其他类修改的字段应该取消其设值方法。将数据的调用行为封装到数据类内部。

21.被拒绝的馈赠：子类继承超类，却只需要使用到超类的一部分内容。

解决方案：可以为子类建一个兄弟类，将子类用不到的父类元素放入兄弟类中，这样就可以保证继承关系的合理性。但是最好还是重新设计类。

22.过多的注释：

出现场景：这里所说的过多的注释指的是因为程序的糟糕导致的注释说明，应当合理的整改代码，那样很多注释就显得多余了。



注意：

注释的使用时机：

(1)记述将来的打算
(2)标记你并无十足把握的区域




























1.依赖倒转原则：

A、高层模块不应该依赖低层模块。两个都应该依赖抽象。
B、抽象不应该依赖细节。细节应该依赖抽象。（实质上就是要针对接口编程）

2.里氏代换原则：

子类型必须能够替换掉它们的父类型。

正是因为子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。

3.

依赖倒转其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之就是过程化的设计了。








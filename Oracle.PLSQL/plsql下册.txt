1.PL/SQL模块结构：

过程：可执行PL/SQL语句块，可以被调用、传入(传出)参数。
函数：通过RETURN语句返回数据的过程。
数据库触发器：数据库中发生了某些事件时所触发执行的一系列命令。
包：由函数、过程、类型以及变量一起组成的并被命名的集合。
对象类型或对象类型的实例：面向对象的类在Oracle中的对应形式。

2.过程：

声明过程：
PROCEDURE [OR REPLACE] 过程名 [(参数1,参数2)]
IS
	变量、异常和数据结构定义;
BEGIN
	程序执行主体
EXCEPTION
	异常处理单元
END;

调用过程：
[包名.]过程名([参数列表]);
END 过程名; --这样写结束块更加规范

过程中尽量不使用RETURN语句。

3.函数：只能作为可执行语句的一部分存在。

单行查询最好都放到函数中去。

声明函数：

FUNCTION [OR REPLACE] 函数名 [(参数列表)]
	RETURN 返回数据类型
IS
	变量、异常和数据结构定义;
BEGIN
	函数主体;
EXCEPTION
	异常处理单元;
END [函数名];

函数的返回类型：标量类型、复杂结构类型、锚定类型、游标类型。

函数的调用：

[包名.]函数名([参数列表]);

为变量赋值、作为SQL语句条件参数、作为视图的一部分、作为游标的一部分。

使用函数时，即便不需要返回值也必须要定义RETURN返回值语句，并且应该在函数主体中使用RETURN语句。

函数中的RETURN语句：

声明部分的RETURN语句：可以返回一个表达式类型，表达式可以有复杂计算或者对其他函数的调用。

在函数主体部分中的RETURN语句：尽量保证在单一函数中仅在程序末尾使用一个RETURN语句来返回声明的结果值。

函数的参数：IN | OUT | IN OUT模式。可以用位置表示法和命名表示法(=>)来关联形参和实参。这里使用位置表示法。参数缺省值的定义为:=或DEFAULT。

4.局部块和嵌套块：在声明部分的嵌套块逻辑。

5.重载：

PL/SQL中，过程和函数是可以重载的，通过参数列表区分，IN | OUT模式的参数模式无法区分重载。

注：数字类型和同参数列表(不同名)的重载感觉不实用，略。

6.前置声明：先给出一个代码块的声明，后续再添加代码块的定义。

7.SQL中调用自定义函数、表函数、FROM子句中调用函数、游标变量传递函数值、创建数据流函数、创建管道函数、函数并行执行、确定性函数：高级特性，略。

8.包：把一组PL/SQL元素组织在一个命名空间下。

包：由包头和包体组成。包头部分定义如何使用这个包，包体部分罗列程序的实现主体。

包的公有和私有：类似Java的访问修饰符控制。

包头：类似于匿名块的定义部分，只是没有实现。

(1)避免在包头中声明变量，不能在包头中声明游标变量，可以声明常量。
(2)可以在包头中声明所有的类型。
(3)可以声明过程、函数和显式游标，但不能有实现。
(4)在包头中添加了过程或函数的声明，则一定要在包体中添加过程或函数的实现。

PACKAGE 包名
IS
	--包头定义--
END 包名;

包体：包含实现包头的全部代码。

(1)包体的声明部分可以包含在包头中没有声明的私有部分。

PACKAGE BODY 包名
IS
	--包体实现--
END 包名;

包元素的使用：包名.属性[方法];

包的生命周期是整个会话，包数据类似于全局变量，但仅仅只能属于一个会话，不能在 多个会话中共享。在包体中声明则只能被包中的元素使用，定义在包头中，则可以被具有EXECUTE权限的使用。在包中定义的游标一旦打开，整个会话过程中都会被打开。

全局公有数据：在包头中定义的数据都是全局公有数据，可以被包以外的元素引用。
包游标：包级别的显式游标。

注：包中数据都是保存在内存或者UGA中的，尽量少使用包级别的元素。

包的串行化：SERIALLY_REUSABLE编译指令可以把包的生命周期缩小到对包的一个程序的调用。

9.触发器：

数据库发生某个事件，作为对这个事件的响应而执行的一个被命名的单元。


DML触发器：可用于校验、维护等。

当向一个特定的表插入、更新或删除记录时可以触发DML触发器。对于开发人员而言这是最常见的触发器类型。其他类型的触发器主要是给DBA使用的。

绑定触发器的标准：语句级还是行级，在语句执行前触发还是在执行后触发，目标操作如何组合。

事务的参与：

(1)触发器抛出了异常，这部分事务会回滚。
(2)如果触发器本身也执行了DML语句，则这个DML也会成为主事务中的一部分。
(3)DML触发器不能执行COMMIT;和ROLLBACK;操作。

创建DML触发器：每个DML触发器只能绑定一个表。

CREATE [OR REPLACE] TRIGGER 触发器名称                                 --触发器名称                   
{BEFORE | AFTER}													   --触发时机
{INSERT | DELETE | UPDATE | UPDATE OF column_list} ON 表名             --DML类型组合，UPDATE语句可以包含所有列也可以指定某些特定的列，用逗号隔开
[FOR EACH ROW]														   --语句级还是行级
[WHEN (...)]														   --可选，指定触发逻辑
[DECLARE ...]														   --触发器匿名块的声明单元
BEGIN
	--执行语句--													   --触发器匿名块的执行单元
[EXCEPTION ...]														   --异常单元
END [触发器名称];													   --结束标记

注：

(1)在触发器匿名块执行单元中使用":NEW.列"来操作修改后的列，使用":OLD.列"来操作修改前的列。":"代表的是宿主变量，在when子句中不能使用，直接用"OLD.列、NEW.列"。
(2)在WHEN子句中只能使用内置函数，不能使用自定义函数。
(3)OLD和NEW在行级触发时才会自动填充，包含ROWID，只能作为列级的数据操作来使用，不能作为行级的数据来操作使用。
(4)NEW记录中的字段值只有在BEFORE行触发器中才能修改。

通过函数确定哪一个DML操作触发了触发器：

BEGIN

IF INSERTING
THEN

ELSIF UPDATING
THEN

ELSIF DELETING
THEN

ELSE

END;

通过FOLLOWS子句来保证多个触发器的执行顺序

...
FOR EACH ROW

FOLLOWS 前一个触发器名称       --当前触发器在这个触发器之后执行

BEGIN

END;

突变表的错误：

行级触发器试图查看或修改正在被修改的表时，就会发生突变表错误。对触发表的读写也会出现这个错误。语句级可以随意读写。

复合触发器：略。


其他类型的触发器：略。

DDL触发器，
数据库事件触发器，
INSTEAD OF 触发器，
AFTER SUSPEND触发器，
管理触发器。


10.管理PL/SQL代码：

USER_ARGUMENTS：包含了属于当前模式的每一个存储程序的每个参数的信息。

PL/SQL程序的调试：利用PL/SQL Developer的调试工具来做。

11.PL/SQL的性能优化：

SQL语句是在SQL运行的，在PL/SQL和SQL层间控制转移叫做上下文切换，每次切换都会有额外的开销。

PL/SQL优化工具：DBMS_PROFILER：利用这个包开启对话分析，运行代码时数据库会通过数据表来记录每一行代码运行花费的时间。

多行SQL批处理：

FORALL 和 BULK COLLECT语句可以把多次上下文切换压缩到一次上下文切换中，提升执行效率。BULK COLLECT提升查询效率，FORALL提升增、删、改效率。

FORALL语法：

FORALL index IN 开始索引..结束索引 DML语句 ;

如：

DECLARE 
  CURSOR cur
  IS
  SELECT * FROM BIM_INSPECTION WHERE ROWNUM <=2;
  TYPE LISTTYPE IS TABLE OF cur%ROWTYPE INDEX BY PLS_INTEGER;
  list LISTTYPE;
  i PLS_INTEGER;
BEGIN
  OPEN cur;
       FETCH cur BULK COLLECT INTO list;
  CLOSE cur;
  
  FORALL index1 IN list.FIRST..list.LAST
      INSERT INTO BIM_INSPECTION (EAF_ID,EAF_NAME) VALUES (list(index1).EAF_ID,list(index1).EAF_NAME);
END;

FORALL相对于FOR新增了属性SQL%BULK_ROWCOUNT：每个SQL语句处理的行数。

管道化函数：略。

普通函数后(IS前)加上关键字pipelined就是管道函数，使用pipe row自动插入数据。

注：尽量使用FORALL语句和BULK COLLECT语句，游标FOR循环可以保留，但OPEN..FETCH INTO..CLOSE;每次都执行一次DB操作的语句需要替换。

12.IO操作和PL/SQL：

利用DBMS_OUTPUT包在屏幕上显示信息。可以把缓冲区设置为UNLIMITED。

PUT_LINE和PUT。相当于println和print。

文件的读写：使用UTL_FILE包，使用得少，略。

使用Web数据：略。












































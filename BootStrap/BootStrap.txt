1.BootStrap：

前端模板。

BootStrap的构成：页面布局（栅格布局）、页面排版、基本组件、jQuery插件、动态样式语言LESS（动态css）、jQuery UI BootStrap。

主要功能：栅格系统、布局、字体样式、多媒体展现、表单、导航。

2.使用BootStrap的准备：

从BootStrap中文网下载BootStrap包。

BootStrap文件结构（源码版）：

docs文件夹：参考文档和例子。
img：图片。
js文件夹：js脚本。
less文件夹：css动态脚本。以.less为后缀名。

编译版：略。

应用BootStrap：

(1)依次引入css依赖文件bootstrap-3.3.7-dist/css/bootstrap.css，如果有responsive.css响应式文件，也要引入。
(2)依次引入jQuery依赖文件和bootstrap-3.3.7-dist/js/bootstrap.js文件。

BootStrap架构解析：

功能主要可以分为这几类：

脚手架：全局性样式文件。
基本css样式：常用HTML元素样式。
BootStrap组件：常用界面组件。
JavaScript插件：与BootStrap组件类似。

3.BootStrap框架解析：

BootStrap使用的部分HTML和CSS需要文档类型为HTML5，所以<!DOCTYPE HTML>必须出现在页面开始部分。核心是轻量的CSS库。

编码规范：采用UTF-8编码，在引入时，应该明确指定rel和type属性。

栅格系统：

把网页宽度平均分为多个网格单元并在每个单元格之间预留一定的空隙。

BootStrap采用的是12栅格系统，包括：固定式和流式（也叫响应式，适应宽度）。流式布局要求被嵌套的列数和等于12。

可以通过修改variables.less和（grid.less、responsive.less）来自定义栅格系统。

BootStrap布局：

(1)FIX固定式布局：无论浏览器是放大还是缩小，内容位置都不会因受到挤压而改变，且整个布局居中。

(2)Fluid流式布局：需要设置最大和最小宽度，在范围内随浏览器的大小调整。

(3)响应式布局：其实只是响应式设计，浏览器地宽度小于某个值的时候，整个网页出现另一种布局。FIX和Fluid都包含响应式设计。

流式和固定式在书写的时候区别在于最外层容器类：container-fluid和container。还可以给这两个样式加左右外边距。

还可以在列中再嵌套行元素。

响应式设计的实现途径：弹性栅格、流式布局、弹性图片等。

使用下面的方式来保证移动端更好的显示：

<meta name="viewport" content="width=device-width, initial-scale=1.0">

还可以禁用缩放，让页面更加像原生页面。

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

列偏移：移动位置。

.col-md-offset-4 和 .col-sm-offset-0等。

列排序：

.col-md-push-* 和 .col-md-pull-*。

如：

<div class="row">
  <div class="col-md-9 col-md-push-3">.col-md-9 .col-md-push-3</div>
  <div class="col-md-3 col-md-pull-9">.col-md-3 .col-md-pull-9</div>
</div>

整体布局如：

    <div class="container-fluid">
        <div class="row">
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
            <div class="col-xs-1 col-lg-1">.col-lg-1</div>
        </div>
        <div class="row">
            <div class="col-xs-8 col-lg-8">.col-lg-8</div>
            <div class="col-xs-4 col-lg-4">.col-lg-4</div>
        </div>
        <div class="row">
            <div class="col-xs-4 col-lg-4">.col-lg-4</div>
            <div class="col-xs-4  col-lg-4">.col-lg-4</div>
            <div class="col-xs-4 col-lg-4">.col-lg-4</div>
        </div>
        <div class="row">
            <div class="col-xs-6 col-lg-6">.col-lg-6</div>
            <div class="col-xs-6 col-lg-6">.col-lg-6</div>
        </div>
    </div>

4.优化css样式：

排版：

(1)标题：<h1>到<h6>，.h1到.h6。在标题内，可以包含<small>和.small来创建副标题。
(2)页面主体：全局font-size为14px，line-height为1.428，这些设置直接给定body和段落元素。添加.lead来突出中心内容。
(3)内联元素文本：
标记文本：<mark>...</mark>，
被删除的文本：<del>...</del>
无用文本：<s>...</s>
插入文本：<ins>...</ins>
带下划线的文本：<u>...</u>
小号文本：<small>...</small>
着重：<strong>...</strong>
斜体：<em></em>
文本对齐：左：class="text-left"，中：class="text-center"，右：class="text-right"。
改变大小写：class="text-lowercase"、class="text-uppercase"、class="text-capitalize"。
缩略语：相当于title属性，基本缩略语：<abbr title="attribute">attr</abbr>，首字母缩略语：<abbr title="HyperText Markup Language" class="initialism">HTML</abbr>，可以让font-size变得小一点。
地址：例子如下，
<address>
  <strong>Twitter, Inc.</strong><br>
  1355 Market Street, Suite 900<br>
  San Francisco, CA 94103<br>
  <abbr title="Phone">P:</abbr> (123) 456-7890
</address>

<address>
  <strong>Full Name</strong><br>
  <a href="mailto:#">first.last@example.com</a>
</address>
引用：直接引用用p标签替代，多种引用如下，
<blockquote>
  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p>
  <footer>Someone famous in <cite title="Source Title">Source Title</cite></footer>
</blockquote>
或右对齐的：
<blockquote class="blockquote-reverse">
  ...
</blockquote>
列表：

无序，
<ul>
  <li>...</li>
</ul>

有序，
<ol>
  <li>...</li>
</ol>

无样式列表：
<ul class="list-unstyled">
  <li>...</li>
</ul>

内联列表：将所有元素放置于同一行。
<ul class="list-inline">
  <li>...</li>
</ul>

描述：带有描述的短语列表。
<dl>
  <dt>...</dt>
  <dd>...</dd>
</dl>

水平列表描述：
<dl class="dl-horizontal">
  <dt>...</dt>
  <dd>...</dd>
</dl>

代码：包裹代码片段。

内联代码：<code>，如：For example, <code>&lt;section&gt;</code> should be wrapped as inline.
用户输入：<kbd>，标记由用户键盘输入的内容。
多行代码：<pre>，.pre-scrollable设置最大高度、并在垂直方向上展示滚动条。
变量：<var>，标记变量，如：<var>y</var> = <var>m</var><var>x</var> + <var>b</var>
程序输出：如：<samp>This text is meant to be treated as sample output from a computer program.</samp>

表格：

基本如下：

    <table class="table table-striped table-bordered table-hover">
        <th><td>标题1</td><td>标题1</td><td>标题1</td></th>
        <tr><td></td><td>1</td><td>1</td><td>1</td></tr>
        <tr><td></td><td>2</td><td>2</td><td>2</td></tr>
    </table>
	
.table-striped：条纹。
.table-bordered：边框。
.table-hover：鼠标悬停。
.table-condensed：紧缩表格，感觉不好看，不要用。

状态类：设置行或单元格颜色。.active（鼠标悬停在行或单元格上时所设置的颜色）、.success（标识成功或积极的动作）、.info（标识普通的提示信息或动作）、.warning（标识警告或需要用户注意）、.danger（标识危险或潜在的带来负面影响的动作）。
如：<tr class="active">...</tr>或<tr><td class="active"></td></tr>

响应式表格：将任何.table元素包裹在.table-responsive 元素内，即可创建响应式表格。

如：

<div class="table-responsive">
  <table class="table">
    ...
  </table>
</div>

表单：单独的表单会被默认设置一些样式。

如：不要将表单和输入框直接混合使用，嵌套到表单组中。

<form>
  <div class="form-group">
    <label for="exampleInputEmail1">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
  </div>
  <div class="form-group">
    <label for="exampleInputPassword1">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
  </div>
  <div class="form-group">
    <label for="exampleInputFile">File input</label>
    <input type="file" id="exampleInputFile">
    <p class="help-block">Example block-level help text here.</p>
  </div>
  <div class="checkbox">
    <label>
      <input type="checkbox"> Check me out
    </label>
  </div>
  <button type="submit" class="btn btn-default">Submit</button>
</form>

内联表单：

为<form>元素添加.form-inline类可使其内容左对齐并且表现为inline-block 级别的控件。
内联表单中的组件可能需要手动设置宽度，并一定要加label标签。

如：

<form class="form-inline">
  <div class="form-group">
    <label class="sr-only" for="exampleInputEmail3">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail3" placeholder="Email">
  </div>
  <div class="form-group">
    <label class="sr-only" for="exampleInputPassword3">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword3" placeholder="Password">
  </div>
  <div class="checkbox">
    <label>
      <input type="checkbox"> Remember me
    </label>
  </div>
  <button type="submit" class="btn btn-default">Sign in</button>
</form>

水平排列的表单：通过为表单添加.form-horizontal类，并联合使用Bootstrap预置的栅格类，可以将label标签和控件组水平并排布局。

如：

<form class="form-horizontal">
  <div class="form-group">
    <label for="inputEmail3" class="col-sm-2 control-label">Email</label>
    <div class="col-sm-10">
      <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
    </div>
  </div>
  <div class="form-group">
    <label for="inputPassword3" class="col-sm-2 control-label">Password</label>
    <div class="col-sm-10">
      <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
    </div>
  </div>
  <div class="form-group">
    <div class="col-sm-offset-2 col-sm-10">
      <div class="checkbox">
        <label>
          <input type="checkbox"> Remember me
        </label>
      </div>
    </div>
  </div>
  <div class="form-group">
    <div class="col-sm-offset-2 col-sm-10">
      <button type="submit" class="btn btn-default">Sign in</button>
    </div>
  </div>
</form>

支持的表单控件：包括大部分表单控件、文本输入域控件，还支持所有HTML5类型的输入控件：text、password、datetime、datetime-local、date、month、time、week、number、email、url、search、tel 和 color。

文本域：

<textarea class="form-control" rows="3"></textarea>

多选和单选框：

默认：
<div class="checkbox">
  <label>
    <input type="checkbox" value="">
    Option one is this and that&mdash;be sure to include why it's great
  </label>
</div>
<div class="checkbox disabled">
  <label>
    <input type="checkbox" value="" disabled>
    Option two is disabled
  </label>
</div>

<div class="radio">
  <label>
    <input type="radio" name="optionsRadios" id="optionsRadios1" value="option1" checked>
    Option one is this and that&mdash;be sure to include why it's great
  </label>
</div>
<div class="radio">
  <label>
    <input type="radio" name="optionsRadios" id="optionsRadios2" value="option2">
    Option two can be something else and selecting it will deselect option one
  </label>
</div>
<div class="radio disabled">
  <label>
    <input type="radio" name="optionsRadios" id="optionsRadios3" value="option3" disabled>
    Option three is disabled
  </label>
</div>

内联：
<label class="checkbox-inline">
  <input type="checkbox" id="inlineCheckbox1" value="option1"> 1
</label>
<label class="checkbox-inline">
  <input type="checkbox" id="inlineCheckbox2" value="option2"> 2
</label>
<label class="checkbox-inline">
  <input type="checkbox" id="inlineCheckbox3" value="option3"> 3
</label>

<label class="radio-inline">
  <input type="radio" name="inlineRadioOptions" id="inlineRadio1" value="option1"> 1
</label>
<label class="radio-inline">
  <input type="radio" name="inlineRadioOptions" id="inlineRadio2" value="option2"> 2
</label>
<label class="radio-inline">
  <input type="radio" name="inlineRadioOptions" id="inlineRadio3" value="option3"> 3
</label>

不带标签的：
<div class="checkbox">
  <label>
    <input type="checkbox" id="blankCheckbox" value="option1" aria-label="...">
  </label>
</div>
<div class="radio">
  <label>
    <input type="radio" name="blankRadio" id="blankRadio1" value="option1" aria-label="...">
  </label>
</div>

下拉列表：

<select class="form-control">
  <option>1</option>
  <option>2</option>
  <option>3</option>
  <option>4</option>
  <option>5</option>
</select>

加了class="form-control"后，默认显示多行。

静态控件：如纯文本。

<form class="form-horizontal">
  <div class="form-group">
    <label class="col-sm-2 control-label">Email</label>
    <div class="col-sm-10">
      <p class="form-control-static">email@example.com</p>
    </div>
  </div>
  <div class="form-group">
    <label for="inputPassword" class="col-sm-2 control-label">Password</label>
    <div class="col-sm-10">
      <input type="password" class="form-control" id="inputPassword" placeholder="Password">
    </div>
  </div>
</form>

焦点状态：将某些表单控件的默认outline样式移除，然后对:focus状态赋予box-shadow属性。？

禁用状态：设置disabled属性。

如：<input class="form-control" id="disabledInput" type="text" placeholder="Disabled input here..." disabled>

fieldset被禁用：设置disabled属性可以禁用所有包含控件。a标签不受影响。

只读状态：设置readonly属性。

如：<input class="form-control" type="text" placeholder="Readonly input here…" readonly>

Help text：

如：

<label class="sr-only" for="inputHelpBlock">Input with help text</label>
<input type="text" id="inputHelpBlock" class="form-control" aria-describedby="helpBlock">
...
<span id="helpBlock" class="help-block">A block of help text that breaks onto a new line and may extend beyond one line.</span>

校验状态：添加.has-warning、.has-error或.has-success类到这些控件的父元素即可。

如：

<div class="form-group has-success">
  <label class="control-label" for="inputSuccess1">Input with success</label>
  <input type="text" class="form-control" id="inputSuccess1" aria-describedby="helpBlock2">
  <span id="helpBlock2" class="help-block">A block of help text that breaks onto a new line and may extend beyond one line.</span>
</div>
<div class="form-group has-warning">
  <label class="control-label" for="inputWarning1">Input with warning</label>
  <input type="text" class="form-control" id="inputWarning1">
</div>
<div class="form-group has-error">
  <label class="control-label" for="inputError1">Input with error</label>
  <input type="text" class="form-control" id="inputError1">
</div>
<div class="has-success">
  <div class="checkbox">
    <label>
      <input type="checkbox" id="checkboxSuccess" value="option1">
      Checkbox with success
    </label>
  </div>
</div>
<div class="has-warning">
  <div class="checkbox">
    <label>
      <input type="checkbox" id="checkboxWarning" value="option1">
      Checkbox with warning
    </label>
  </div>
</div>
<div class="has-error">
  <div class="checkbox">
    <label>
      <input type="checkbox" id="checkboxError" value="option1">
      Checkbox with error
    </label>
  </div>
</div>

添加额外图标：

针对校验状态添加图标，设置相应的.has-feedback类并添加正确的图标即可。反馈图标（feedback icon）只能使用在文本输入框 <input class="form-control"> 元素上。
图标定位需要添加label标签，建议所有输入框都加label，如果不想显示增加.sr-only类即可。

如：
<div class="form-group has-success has-feedback">
  <label class="control-label" for="inputSuccess2">Input with success</label>
  <input type="text" class="form-control" id="inputSuccess2" aria-describedby="inputSuccess2Status">
  <span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"></span>
  <span id="inputSuccess2Status" class="sr-only">(success)</span>
</div>
<div class="form-group has-warning has-feedback">
  <label class="control-label" for="inputWarning2">Input with warning</label>
  <input type="text" class="form-control" id="inputWarning2" aria-describedby="inputWarning2Status">
  <span class="glyphicon glyphicon-warning-sign form-control-feedback" aria-hidden="true"></span>
  <span id="inputWarning2Status" class="sr-only">(warning)</span>
</div>
<div class="form-group has-error has-feedback">
  <label class="control-label" for="inputError2">Input with error</label>
  <input type="text" class="form-control" id="inputError2" aria-describedby="inputError2Status">
  <span class="glyphicon glyphicon-remove form-control-feedback" aria-hidden="true"></span>
  <span id="inputError2Status" class="sr-only">(error)</span>
</div>
<div class="form-group has-success has-feedback">
  <label class="control-label" for="inputGroupSuccess1">Input group with success</label>
  <div class="input-group">
    <span class="input-group-addon">@</span>
    <input type="text" class="form-control" id="inputGroupSuccess1" aria-describedby="inputGroupSuccess1Status">
  </div>
  <span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"></span>
  <span id="inputGroupSuccess1Status" class="sr-only">(success)</span>
</div>

为水平排列的表单和内联表单设置可选的图标：
<form class="form-horizontal">
  <div class="form-group has-success has-feedback">
    <label class="control-label col-sm-3" for="inputSuccess3">Input with success</label>
    <div class="col-sm-9">
      <input type="text" class="form-control" id="inputSuccess3" aria-describedby="inputSuccess3Status">
      <span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"></span>
      <span id="inputSuccess3Status" class="sr-only">(success)</span>
    </div>
  </div>
  <div class="form-group has-success has-feedback">
    <label class="control-label col-sm-3" for="inputGroupSuccess2">Input group with success</label>
    <div class="col-sm-9">
      <div class="input-group">
        <span class="input-group-addon">@</span>
        <input type="text" class="form-control" id="inputGroupSuccess2" aria-describedby="inputGroupSuccess2Status">
      </div>
      <span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"></span>
      <span id="inputGroupSuccess2Status" class="sr-only">(success)</span>
    </div>
  </div>
</form>

可选的图标与设置 .sr-only 类的 label：

<div class="form-group has-success has-feedback">
  <label class="control-label sr-only" for="inputSuccess5">Hidden label</label>
  <input type="text" class="form-control" id="inputSuccess5" aria-describedby="inputSuccess5Status">
  <span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"></span>
  <span id="inputSuccess5Status" class="sr-only">(success)</span>
</div>
<div class="form-group has-success has-feedback">
  <label class="control-label sr-only" for="inputGroupSuccess4">Input group with success</label>
  <div class="input-group">
    <span class="input-group-addon">@</span>
    <input type="text" class="form-control" id="inputGroupSuccess4" aria-describedby="inputGroupSuccess4Status">
  </div>
  <span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"></span>
  <span id="inputGroupSuccess4Status" class="sr-only">(success)</span>
</div>

控件尺寸：通过.input-lg类似的类可以为控件设置高度，通过.col-lg-*类似的类可以为控件设置宽度。

如：
<input class="form-control input-lg" type="text" placeholder=".input-lg">
<input class="form-control" type="text" placeholder="Default input">
<input class="form-control input-sm" type="text" placeholder=".input-sm">

<select class="form-control input-lg">...</select>
<select class="form-control">...</select>
<select class="form-control input-sm">...</select>

水平排列的表单组的尺寸：通过添加 .form-group-lg 或 .form-group-sm 类，为 .form-horizontal 包裹的 label 元素和表单控件快速设置尺寸。

<form class="form-horizontal">
  <div class="form-group form-group-lg">
    <label class="col-sm-2 control-label" for="formGroupInputLarge">Large label</label>
    <div class="col-sm-10">
      <input class="form-control" type="text" id="formGroupInputLarge" placeholder="Large input">
    </div>
  </div>
  <div class="form-group form-group-sm">
    <label class="col-sm-2 control-label" for="formGroupInputSmall">Small label</label>
    <div class="col-sm-10">
      <input class="form-control" type="text" id="formGroupInputSmall" placeholder="Small input">
    </div>
  </div>
</form>

调整列（column）尺寸：栅格系统。

<div class="row">
  <div class="col-xs-2">
    <input type="text" class="form-control" placeholder=".col-xs-2">
  </div>
  <div class="col-xs-3">
    <input type="text" class="form-control" placeholder=".col-xs-3">
  </div>
  <div class="col-xs-4">
    <input type="text" class="form-control" placeholder=".col-xs-4">
  </div>
</div>

按钮：

可作为按钮使用的标签或元素：<a>、<button>或<input>，添加button class即可。

如：
<a class="btn btn-default" href="#" role="button">Link</a>
<button class="btn btn-default" type="submit">Button</button>
<input class="btn btn-default" type="button" value="Input">
<input class="btn btn-default" type="submit" value="Submit">

针对组件的注意事项：虽然按钮类可以应用到<a>和<button>元素上，但是，导航和导航条组件只支持<button>元素。
链接被作为按钮使用时的注意事项：如果 <a> 元素被作为按钮使用 -- 并用于在当前页面触发某些功能 -- 而不是用于链接其他页面或链接当前页面中的其他部分，那么，务必为其设置 role="button" 属性。
最佳实践是：强烈建议尽可能使用 <button> 元素来获得在各个浏览器上获得相匹配的绘制效果。

按钮预定义样式：按钮的一些例子样式。

如下：

<!-- Standard button -->
<button type="button" class="btn btn-default">（默认样式）Default</button>

<!-- Provides extra visual weight and identifies the primary action in a set of buttons -->
<button type="button" class="btn btn-primary">（首选项）Primary</button>

<!-- Indicates a successful or positive action -->
<button type="button" class="btn btn-success">（成功）Success</button>

<!-- Contextual button for informational alert messages -->
<button type="button" class="btn btn-info">（一般信息）Info</button>

<!-- Indicates caution should be taken with this action -->
<button type="button" class="btn btn-warning">（警告）Warning</button>

<!-- Indicates a dangerous or potentially negative action -->
<button type="button" class="btn btn-danger">（危险）Danger</button>

<!-- Deemphasize a button by making it look like a link while maintaining button behavior -->
<button type="button" class="btn btn-link">（链接）Link</button>


按钮尺寸：使用.btn-lg、.btn-sm或.btn-xs就可以获得不同尺寸的按钮。

<p>
  <button type="button" class="btn btn-primary btn-lg">（大按钮）Large button</button>
  <button type="button" class="btn btn-default btn-lg">（大按钮）Large button</button>
</p>
<p>
  <button type="button" class="btn btn-primary">（默认尺寸）Default button</button>
  <button type="button" class="btn btn-default">（默认尺寸）Default button</button>
</p>
<p>
  <button type="button" class="btn btn-primary btn-sm">（小按钮）Small button</button>
  <button type="button" class="btn btn-default btn-sm">（小按钮）Small button</button>
</p>
<p>
  <button type="button" class="btn btn-primary btn-xs">（超小尺寸）Extra small button</button>
  <button type="button" class="btn btn-default btn-xs">（超小尺寸）Extra small button</button>
</p>

通过给按钮添加 .btn-block 类可以将其拉伸至父元素100%的宽度，而且按钮也变为了块级（block）元素。
<button type="button" class="btn btn-primary btn-lg btn-block">（块级元素）Block level button</button>
<button type="button" class="btn btn-default btn-lg btn-block">（块级元素）Block level button</button>

激活状态：当按钮处于激活状态时，其表现为被按压下去。

如：
<button type="button" class="btn btn-primary btn-lg active">Primary button</button>
<button type="button" class="btn btn-default btn-lg active">Button</button>

链接（<a>）元素：可以为基于 <a> 元素创建的按钮添加 .active 类。
<a href="#" class="btn btn-primary btn-lg active" role="button">Primary link</a>
<a href="#" class="btn btn-default btn-lg active" role="button">Link</a>

禁用状态：通过为按钮的背景设置 opacity 属性就可以呈现出无法点击的效果。
button 元素：为 <button> 元素添加 disabled 属性，使其表现出禁用状态。
<button type="button" class="btn btn-lg btn-primary" disabled="disabled">Primary button</button>
<button type="button" class="btn btn-default btn-lg" disabled="disabled">Button</button>

链接（<a>）元素：为基于 <a> 元素创建的按钮添加 .disabled 类。
<a href="#" class="btn btn-primary btn-lg disabled" role="button">Primary link</a>
<a href="#" class="btn btn-default btn-lg disabled" role="button">Link</a>

图片：

响应式图片：为图片添加.img-responsive类可以让图片支持响应式布局。
如果需要让使用了.img-responsive类的图片水平居中，请使用.center-block 类，不要用.text-center。
<img src="..." class="img-responsive" alt="Responsive image">

图片形状：让图片呈现不同的形状。

<img src="..." alt="..." class="img-rounded">
<img src="..." alt="..." class="img-circle">
<img src="..." alt="..." class="img-thumbnail">

辅助类：

情境文本颜色：
<p class="text-muted">...</p>
<p class="text-primary">...</p>
<p class="text-success">...</p>
<p class="text-info">...</p>
<p class="text-warning">...</p>
<p class="text-danger">...</p>

情境背景色：
<p class="bg-primary">...</p>
<p class="bg-success">...</p>
<p class="bg-info">...</p>
<p class="bg-warning">...</p>
<p class="bg-danger">...</p>

关闭按钮：
<button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>

三角符号：
span class="caret"></span>

快速浮动：
<div class="pull-left">...</div>
<div class="pull-right">...</div>

让内容块居中：
<div class="center-block">...</div>

清除浮动：
<div class="clearfix">...</div>

显示或隐藏内容：.show 和.hidden类可以强制任意元素显示或隐藏。.invisible隐藏占位。
<div class="show">...</div>
<div class="hidden">...</div>

.sr-only：类可以对屏幕阅读器以外的设备隐藏内容。
<a class="sr-only sr-only-focusable" href="#content">Skip to main content</a>

图片替换：使用.text-hide类或对应的mixin可以用来将元素的文本内容替换为一张背景图。
<h1 class="text-hide">Custom heading</h1>

响应式工具：针对移动端。略。

5.使用LESS：是一门预处理语言。支持变量、函数等。

bootstrap中的css由less编译而来。以@开头，可作为参数、变量，用于计算等。如：@color、@{file-2x}、@skew(@x,@y)。

6.使用SASS：移植版，略。

7.组件和js插件：这个不用学，使用的时候官网查就行了。
































































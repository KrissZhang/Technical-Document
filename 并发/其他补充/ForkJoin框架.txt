1.Fork/Join框架：

Fork/Join框架是Java7提供的一个用于并行执行任务的框架，是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。使用"工作窃取"算法，主要用于实现"分而治之"。

线程池中每个线程都有自己的工作队列(ThreadPoolExecutor不同，是所有线程共用一个工作队列，所有线程都从这个工作队列中取任务)，当自己队列中的任务都完成以后，会从其他线程的工作队列中偷取任务执行，这样就可以充分地利用资源。

2.工作窃取算法：

是指某个线程从其他队列里窃取任务来执行。

优点是充分利用线程进行并行计算，并减少了线程间的竞争，其缺点是在某些情况下还是存在竞争，比如双端队列里只有一个任务时。并且消耗了更多的系统资源，比如创建多个线程和多个双端队列。

3.Fork/Join框架基础类：

(1)ForkJoinPool： 

用来执行Task，或生成新的ForkJoinWorkerThread，执行 ForkJoinWorkerThread 间的 work-stealing 逻辑。ForkJoinPool 不是为了替代 ExecutorService，而是它的补充，在某些应用场景下性能比 ExecutorService 更好。

(2)ForkJoinTask：

执行具体的分支逻辑，声明以同步/异步方式进行执行。

(3)ForkJoinWorkerThread：

是 ForkJoinPool 内的 worker thread，执行。

(4)ForkJoinTask：

内部有 ForkJoinPool.WorkQueue 来保存要执行的ForkJoinTask。

(5)ForkJoinPool.WorkQueue：

保存要执行的ForkJoinTask。

4.基本思想：

(1)ForkJoinPool 的每个工作线程都维护着一个工作队列(WorkQueue)，这是一个双端队列(Deque)，里面存放的对象是任务(ForkJoinTask)。

(2)每个工作线程在运行中产生新的任务(通常是因为调用了 fork())时，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是 LIFO 方式，也就是说每次从队尾取出任务来执行。

(3)每个工作线程在处理自己的工作队列同时，会尝试窃取一个任务(或是来自于刚刚提交到pool的任务，或是来自于其他工作线程的工作队列)，窃取的任务位于其他线程的工作队列的队首，也就是说工作线程在窃取其他工作线程的任务时，使用的是FIFO方式。

(4)在遇到 join() 时，如果需要 join 的任务尚未完成，则会先处理其他任务，并等待其完成。

(5)在既没有自己的任务，也没有可以窃取的任务时，进入休眠。

5.注意：

ForkJoinPool 使用 submit 或 invoke 提交的区别：invoke是同步执行，调用之后需要等待任务完成，才能执行后面的代码；submit 是异步执行，只有在 Future 调用 get 的时候会阻塞。


















































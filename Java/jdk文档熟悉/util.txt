1.集合接口：

AbstractCollection<E> --Collection 接口的骨干实现。
AbstractList<E> --List 接口的骨干实现。
AbstractMap<K,V> --Map 接口的骨干实现。
AbstractQueue<E> --Queue 操作的骨干实现。
AbstractSequentialList<E> --List 接口的骨干实现。
AbstractSet<E> --Set 接口的骨干实现。

2.ArrayList<E>：

List接口最常用实现类。

常用方法：

add(E o) 
addAll(Collection<? extends E> c)
clear()
clone() --返回此ArrayList实例的前表复制。
contains(Object elem)
get(int index)
indexOf(Object elem)
isEmpty() --测试此列表中是否没有元素。
lastIndexOf(Object elem) --返回指定的对象在列表中最后一次出现的位置索引。
remove(int index)/remove(Object o) 
removeRange(int fromIndex, int toIndex) --左闭右开的。
set(int index, E element) --用指定的元素替代此列表中指定位置上的元素。
int size() 
toArray(T[] t) --返回一个按照正确的顺序包含此列表中所有元素的数组。如：String[] arr = list.toArray(new String[list.size()]);

3.Arrays：

数组操作类。

asList(T... a) --返回一个受指定数组支持的固定大小的列表。如：Arrays.asList(arr);
binarySearch(Object[] a, Object key) --二分法查找对象。
deepEquals(Object[] a1, Object[] a2) --如果两个指定数组彼此是深层相等 的，则返回 true。
deepToString(Object[] a) --返回指定数组“深层内容”的字符串表示形式。
fill(int[] a, int val) --填充数组中的每个值。
sort(int[] a) --对指定的 int 型数组按数字升序进行排序。

4.BitSet：

此类实现了一个按需增长的位向量。

5.Calendar：

抽象类，日期操作。


获取日期类的特殊字段：略。

如：获取年，

		Calendar c = Calendar.getInstance();
		System.out.println(c.get(c.YEAR));
		
常用方法：

add(int field, int amount) --根据日历的规则，为给定的日历字段添加或减去指定的时间量。如：c.add(c.MONTH, -1);
after(Object when) --判断此 Calendar 表示的时间是否在指定 Object 表示的时间之后，返回判断结果。
before(Object when) --判断此 Calendar 表示的时间是否在指定 Object 表示的时间之前，返回判断结果。
clear()  --清楚日期设置。
compareTo(Calendar anotherCalendar) -- 小于~-1，等于~0，大于~1
get(int field)  --获取字段值
getInstance() --通过默认时区和语言获得一个日历
getTime() --返回此日期对应的时间值
setTime(Date date)  --设置此日期对应的时间(通过不同的构造可实现多种值得设置)

6.Collection<E> -- API类似集合，略。

7.Collections：

collection封装工具类。

addAll(Collection<? super T> c, T... a) --将所有指定元素添加到指定collection中。
binarySearch(List<? extends Comparable<? super T>> list, T key) --使用二进制搜索算法来搜索指定列表，以获得指定对象。
copy(List<? super T> dest, List<? extends T> src) --将所有元素从一个列表复制到另一个列表。
disjoint(Collection<?> c1, Collection<?> c2) --如果两个指定collection中没有相同的元素，则返回 true。
swap(List<?> list, int i, int j) --在指定列表的指定位置处交换元素。(i,j从0开始)

8.Comparator<T>：

与Comparable<C>类似，用于sort方法的排序：

如：

package com.self.test4;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Test {
	public static void main(String[] args) {
		List<C> list = new ArrayList<C>();
		list.add(new C(2));
		list.add(new C(3));
		list.add(new C(1));
		Collections.sort(list, new C());
		for (C c : list) {
			System.out.println(c.toString());
		}
	}
}

class C implements Comparator<C>{
	
	private Integer numb;
	
	public C() {
		super();
	}
	
	public C(Integer numb) {
		super();
		this.numb = numb;
	}

	@Override
	public int compare(C o1, C o2) {
		if(o1.numb<o2.numb){
			return -1;
		}else if(o1.numb == o2.numb){
			return 0;
		}else{			
			return 1;
		}
	}

	@Override
	public String toString() {
		return "C:" + this.numb;
	}
}

9.Currency：

表示货币：

		Currency currency = Currency.getInstance(Locale.CHINA);
		String money = currency.getSymbol();
		System.out.println(money);
		
10.Date：

表示特定的瞬间，精确到毫秒。

功能大多都可以使用Calendar来代替。

11.Formatter：

C风格的格式字符串解释程序。

用法同String.format(format,param1,param2)类似

如：

		Formatter format = new Formatter();
		String msg = format.format("%s是%s", "中国" , "大国").toString();
		
12.GregorianCalendar：

Calendar的常用实现类，用法基本和Calendar类似。

isLeapYear(int year) --是否是闰年。

13.HashMap<K,V>：

clear()
containsKey(Object key)
containsValue(Object value)
entrySet() --返回此映射所包含的映射关系的collection视图
get(Object key)
isEmpty() 
keySet() 
put(K key, V value)
remove(Object key)
size() 
values()

14.List<E>：

add(E o)
addAll(Collection<? extends E> c) 
clear()
contains(Object o) 
get(int index) 
indexOf(Object o) 
isEmpty()
iterator()
lastIndexOf(Object o) 
remove(int index)
set(int index, E element) --用指定元素替换列表中指定位置的元素（可选操作）。
size()
subList(int fromIndex, int toIndex) 
toArray(T[] a) 

15.HashSet<E>：

add(E o)
clear()
contains(Object o) 
isEmpty() 
iterator()
remove(Object o) 
size()

16.Hashtable<K,V>、LinkedHashMap<K,V>、LinkedHashSet<E>：类似。

17.Iterator<E>：

迭代器。

hasNext()
next()
remove()

18.LinkedList<E>：

addFirst(E o) --将给定元素插入此列表的开头。
addLast(E o) --将给定元素追加到此列表的结尾。
getFirst()
getLast() 
offer(E o) --将指定元素添加到此列表的末尾（最后一个元素）。
peek() --找到但不移除此列表的头（第一个元素）。
poll() --找到并移除此列表的头（第一个元素）。

19.Locale：表示特定的地区，略。

20.Properties：

表示一个持久的属性集，可以从流中加载，不要使用put方法，而应该使用setProperty方法。

写：

		Properties p = new Properties();
		p.setProperty("name", "Zp");
		p.setProperty("value", "123321");
		
		File file = new File("E:\\aa.properties");
		try {
			OutputStream out = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(file)));
			p.store(out, "保存测试属性值");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
读：

		File file = new File("E:\\aa.properties");
		Properties p = new Properties();
		InputStream is;
		try {
			is = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
			p.load(is);
			String key = p.getProperty("name");
			String value = p.getProperty("value");
			System.out.println(key);
			System.out.println(value);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
常用方法：

getProperty(String key)
load(InputStream inStream)
propertyNames() --返回属性列表中所有键的枚举
setProperty(String key, String value) 
store(OutputStream out, String comments)

21.Queue<E>：

队列，先进先出。

LinkedList实现了该接口，提供了插入、提取、检查工作。

22.Random：

生成伪随机数流。

		Random r = new Random();
		System.out.println(r.nextInt());
		
23.Scanner：略。

可以使用正则表达式分析基本类型和字符串的简单文本扫描器。

24.Stack<E>：

栈，后进先出。

常用方法：

empty()
peek() --查看栈顶对象而不移除它。
push(E item) --把项压入栈顶。
pop() --移除栈顶对象并作为此函数的值返回该对象。
search(Object o) --返回对象在栈中的位置，索引值与插入顺序逆序。

25.StringTokenizer：

可用于分解字符串。

常用方法：

		StringTokenizer token = new StringTokenizer("444X555X6666X777777 9999","X");
		while(token.hasMoreTokens()){
			System.out.println(token.nextToken());
		}
		
26.Timer、TimerTask：

定时器，实质上也是用线程来实现的。

schedule(TimerTask task, Date firstTime, long period)
cancel()

如：延迟1秒钟开始，每3秒钟执行一次。

package com.self.test4;

import java.util.Timer;
import java.util.TimerTask;

public class Test {
	public static void main(String[] args) {
		Timer timer = new Timer();
		timer.schedule(new MyTask(), 1000 , 3000);
	}
}

class MyTask extends TimerTask{
	@Override
	public void run() {
		System.out.println("ddd");
	}
}

27.TimeZone：时区偏移量，略。

28.TreeMap<K,V>：

常用方法：

firstKey()
headMap(K toKey) --返回此映射的部分视图，其键严格小于 toKey。
lastKey()
subMap(K fromKey, K toKey) --返回此映射的部分视图，其键值从 fromKey（包括）到toKey（不包括）。
tailMap(K fromKey) --返回映射的部分视图，其键大于或等于fromKey。
values() --返回此Map中所包含的值的collection视图。

29.TreeSet<E>：

first()
headSet(E toElement) --返回此set的部分视图，要求其元素严格小于toElement。
last()
subSet(E fromElement, E toElement)
tailSet(E fromElement) --返回set的部分视图，其元素大于或等于fromElement。

30.UUID：

128位通用唯一标识符，通用唯一标识符。

randomUUID()

31.Vector<E>：

与LinkedList类似。

32.WeakHashMap<K,V>：

以弱键的方式实现哈希表，某个键映射的值如果不存在或被垃圾回收器回收，那么这个键就将被终止。














		

































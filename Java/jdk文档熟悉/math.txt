1.BigInteger：

操作大整数。

2.BigDecimal：

操作大数位的数据。

	public static void main(String[] args) {	
		//加法运算
		String resultForAdd = add("3.1415926535762333345345345345345345","4.673453453453453453453453453454353453453454345",5);
		System.out.println("加法结果为："+resultForAdd);
		
		//减法运算
		String resultForSub = sub("3.1415926535762333345345345345345345","4.673453453453453453453453453454353453453454345",5);
		System.out.println("减法结果为："+resultForSub);
		
		//乘法运算
		String resultForMul = mul("3.1415926535762333345345345345345345","4.673453453453453453453453453454353453453454345",5);
		System.out.println("乘法结果为："+resultForMul);
		
		//除法运算
		String resultForDiv = div("3.1415926535762333345345345345345345","4.673453453453453453453453453454353453453454345",5);
		System.out.println("除法结果为："+resultForDiv);
		
		//测试mathContext
		String resultForMathContext = mathContext("3.1415926535762333345345345345345345",5);
		System.out.println(resultForMathContext);
		
	}
	

	/**
	 * 精确的加法运算
	 * @param v1  加数1
	 * @param v2  加数2
	 * @param scale 保留小数位数
	 * @return 精确计算结果
	 */
	public static String add(String v1,String v2,int scale){
		if(scale < 0){
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		BigDecimal b1 = new BigDecimal(v1);
		BigDecimal b2 = new BigDecimal(v2);
		return b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();
	}
	
	/**
	 * 精确的减法运算
	 * @param v1 被减数
	 * @param v2 减数
	 * @param scale 保留小数位数
	 * @return 精确计算结果
	 */
	public static String sub(String v1,String v2,int scale){
		if(scale < 0){
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		BigDecimal b1 = new BigDecimal(v1);
		BigDecimal b2 = new BigDecimal(v2);
		return b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();
	}
	
	/**
	 * 精确的乘法运算
	 * @param v1 乘数1
	 * @param v2 乘数2
	 * @param scale 保留小数位数
	 * @return 精确计算结果
	 */
	public static String mul(String v1,String v2,int scale){
		if(scale < 0){
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		BigDecimal b1 = new BigDecimal(v1);
		BigDecimal b2 = new BigDecimal(v2);
		return b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();
	}
	
	/**
	 * 精确的除法运算
	 * @param v1 被除数
	 * @param v2 除数
	 * @param scale 保留小数位数
	 * @return 精确计算结果
	 */
	public static String div(String v1,String v2,int scale){
		if(scale < 0){
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		BigDecimal b1 = new BigDecimal(v1);
		BigDecimal b2 = new BigDecimal(v2);
		return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();
	}
	
	/**
	 * mathContext的使用
	 * @param param 参数值
	 * @param scale 保留小数位数
	 * @return 约数结果
	 */
	public static String mathContext(String param,int scale){
		BigDecimal b1 = new BigDecimal(param,new MathContext(scale,RoundingMode.HALF_UP));
		return b1.toString();
	}
	
3.











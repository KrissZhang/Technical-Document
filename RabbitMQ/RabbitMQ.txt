1.消息中间件，底层使用ERLang语言，易与SpringAMQP完美整合。

2.AMQP：高级消息队列协议。

3.Linux下的安装：先略过，学完Linux再移到Linux上。
windows安装：https://baijiahao.baidu.com/s?id=1608425504960724381&wfr=spider&for=pc

4.RabbitMQ核心概念：

整体架构：

参考架构图。P(生产者)、Exchange(交换机)、Queues(消息队列)、C(消费者)。投递->路由->消费获取。

Server：又称Broker，接受客户端的链接，实现AMQP实体服务。
Connection：链接，应用程序与Broker的网络链接。
Channel：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道。客户端可建立多个Channel，每个Channel代表一个会话任务。
Message：消息，服务器和应用程序之间传送的数据，由Properties和Body组成。Properties可以对消息进行修饰，比如消息的优先级、延迟等高级特性，Body则就是消息体内容。
Virtual host：虚拟地址，用于进行逻辑隔离，最上层的消息路由。一个Virtual Host里不能有相同名称的Exchange或Queue。(类似包的作用)
Exchange：交换机，接收消息，根据路由键转发消息到绑定的队列。
Binding：Exchange和Queue之间的虚拟链接，binding中可以包含routing key。
Routing Key：一个路由规则，虚拟机可用它来确定如何路由一个特定消息。
Queue：也称为Message Queue，消息队列，保存消息并将它们转发给消费者。

AMQP协议模型：参考AMQP协议模型图。

RabbitMQ消息是如何流转的：参考RabbitMQ消息流转图。

5.RabbitMQ整合SpringBoot2.x：

(1)生产者

SpringBoot与RabbitMQ集成非常简单，不需要做任何的额外设置，只需要两步即可：
->  引入相关依赖

        <!-- RabbitMQ -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>

->  对application.properties进行配置

spring.rabbitmq.addresses=localhost:5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtual-host=/
spring.rabbitmq.connection-timeout=15000

# Server
server.servlet.context-path=/
server.port=8001

#
spring.http.encoding.charset=UTF-8

然后编写：

实体类：

package com.self.rabbitmq.entity;

import java.io.Serializable;

/**
 * 用户类
 * @author Zp
 */
public class User implements Serializable {

    private static final long serialVersionUID = 6566862677104209174L;

    //id
    private Integer id;

    //用户名
    private String name;

    //消息发送唯一标识
    private String msgId;

    public User() {

    }

    public User(Integer id, String name, String msgId) {
        this.id = id;
        this.name = name;
        this.msgId = msgId;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getMsgId() {
        return msgId;
    }

    public void setMsgId(String msgId) {
        this.msgId = msgId;
    }

}

发送服务类：

package com.self.rabbitmq.service;

import com.self.rabbitmq.entity.User;
import org.springframework.amqp.rabbit.connection.CorrelationData;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * 用户发送消息服务
 */
@Service
public class UserSender {

    @Autowired
    private RabbitTemplate rabbitTemplate;

    /**
     * 消息发送方法
     * @param user 用户
     * @throws Exception 异常
     */
    public void send(User user) throws Exception{
        CorrelationData correlationData = new CorrelationData();
        correlationData.setId(user.getMsgId());

        rabbitTemplate.convertAndSend("user-exchange",  //exchange
                "user.aaa",  //routingKey
                user,  //消息体内容
                correlationData);  //消息唯一ID
    }

}

然后在RabbitMQ管控台添加：

exchange：名字和sender中一致，类型为Topic，Durable序列化。
Queues：名字，Durable序列化。

然后在exchange或Queues中，把exchange和Queues绑定。
如：点击打开user-exchange -> Bindings -> 填写Queues的名字和Routing key(可以用 .*、.# 模糊匹配，一个或多个词)

调用发送器发送方法，在管控台中查看待处理消息。点击创建的Queue -> Get Message

(2)消费者：

添加依赖：

        <!-- RabbitMQ -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>

对消费端application.properties进行配置：

# RabbitMQ
spring.rabbitmq.addresses=localhost:5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtual-host=/
spring.rabbitmq.connection-timeout=15000

# Consumer 配置
spring.rabbitmq.listener.simple.concurrency=5
spring.rabbitmq.listener.simple.max-concurrency=10
spring.rabbitmq.listener.simple.acknowledge-mode=manual
spring.rabbitmq.listener.simple.prefetch=1

# Server
server.servlet.context-path=/
server.port=8002

#
spring.http.encoding.charset=UTF-8


添加与生产者包路径和类名完全相同的实体类：

package com.self.rabbitmq.entity;

import java.io.Serializable;

/**
 * 用户类
 * @author Zp
 */
public class User implements Serializable {

    private static final long serialVersionUID = 6566862677104209174L;

    //id
    private Integer id;

    //用户名
    private String name;

    //消息发送唯一标识
    private String msgId;

    public User() {

    }

    public User(Integer id, String name, String msgId) {
        this.id = id;
        this.name = name;
        this.msgId = msgId;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getMsgId() {
        return msgId;
    }

    public void setMsgId(String msgId) {
        this.msgId = msgId;
    }

}

添加消费服务类：

package com.self.rabbitmq.service;

import com.rabbitmq.client.Channel;
import com.self.rabbitmq.entity.User;
import org.springframework.amqp.rabbit.annotation.*;
import org.springframework.amqp.support.AmqpHeaders;
import org.springframework.messaging.handler.annotation.Headers;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Service;

import java.util.Map;

/**
 * 用户消费者服务
 */
@Service
public class UserReceiver {

    @RabbitListener(bindings = @QueueBinding(
            value = @Queue(value = "user-queue", durable = "true"),
            exchange = @Exchange(name = "user-exchange", durable = "true", type = "topic"),
            key = "user.#"
        )
    )
    @RabbitHandler
    public void receive(@Payload User user, @Headers Map<String,Object> headers, Channel channel) throws Exception{
        System.out.println("收到消息，开始消费：");
        System.out.println("用户ID：" + user.getId());

        Long deliveryTag = (Long)headers.get(AmqpHeaders.DELIVERY_TAG);

        //手动签收
        channel.basicAck(deliveryTag,false);
    }

}

启动消费者后，再启动生产者，调用消息生产方法，查看消费者是否已处理消息。

6.消息可靠性投递：



























